version: '3.8'

services:
  # 后端 API 服务
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock-info-collector-api
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=file:./dev.db
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - LOG_LEVEL=info
    volumes:
      - ./backend/prisma:/app/prisma
      - api_data:/app/data
    networks:
      - stock-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端 Web 服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock-info-collector-frontend
    restart: unless-stopped
    ports:
      - '80:80'
    depends_on:
      - api
    networks:
      - stock-network
    environment:
      - API_URL=http://api:3000

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: stock-info-collector-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - stock-network
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存 (可选)
  redis:
    image: redis:alpine
    container_name: stock-info-collector-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - stock-network
    command: redis-server --appendonly yes

  # 监控服务 (可选)
  monitoring:
    image: prom/prometheus:latest
    container_name: stock-info-collector-monitoring
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - monitoring_data:/prometheus
    networks:
      - stock-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  api_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  monitoring_data:
    driver: local

networks:
  stock-network:
    driver: bridge
